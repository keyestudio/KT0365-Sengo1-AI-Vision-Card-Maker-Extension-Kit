from machine import I2C,UART,Pinfrom  Sengo1  import *import timeimport randomcolor_Name = [" ","Black","Whiet","Red","Green","Blue","Yellow"]# Wait for Sengo1 to initialize the operating system. This waiting time cannot be removed to prevent the situation where the controller has already developed and sent instructions before Sengo1 has been fully initializedtime.sleep(3)# Select UART or I2C communication mode. Sengo1 is I2C mode by default. You can change it by just pressing the mode button.# 4 UART communication modes: UART9600(Standard Protocol Instruction); UART57600(Standard Protocol Instruction), UART115200(Standard Protocol Instruction); Simple9600(Simple Protocol Instruction)# port = UART(2,rx=Pin(16),tx=Pin(17),baudrate=9600)port = I2C(0,scl=Pin(21),sda=Pin(20),freq=400000)# Sengo1 communication address: 0x60. If multiple devices are connected to the I2C bus, please avoid address conflicts.sengo1 = Sengo1(0x60)err = sengo1.begin(port)if err != SENTRY_OK:    print(f"Initialization failed，error code:{err}")else:    print("Initialization succeeded")# 1. The default parameters of the algorithm. If they do not need to be changed, this line of code can be deleted# 2Only two algorithms, color recognition and color block detection, require parameter settings.# 3. The aspect ratio of the Sengo1 image is 4:3. When the width-to-height is set to 3:4, the recognition area is a square. When the width-to-height is set to 1:1, the recognition area is rectangular.sengo1.SetParam(sengo1_vision_e.kVisionColor,[50, 50, 3, 4, 1])time.sleep(0.1)# Sengo1 can only run one recognition algorithm at a time.err = sengo1.VisionBegin(sengo1_vision_e.kVisionColor)if err != SENTRY_OK:    print(f"Starting algo Color failed，error code:{err}")else:    print("Starting algo Color succeeded")       while True:       # Sengo1 does not actively return the detection and recognition results; it requires the main control board to send instructions for reading.    # The reading process: 1.read the number of recognition results. 2.After receiving the instruction, Sengo1 will refresh the result data. 3.If the number of results is not zero, the board will then send instructions to read the relevant information. (Please be sure to build the program according to this process.)    # Sengo can output at most one recognition result.    obj_num = (sengo1.GetValue(sengo1_vision_e.kVisionColor, sentry_obj_info_e.kStatus))    if obj_num:        # Read the value of the color label        label = sengo1.GetValue(sengo1_vision_e.kVisionColor,sentry_obj_info_e.kLabel)        # Output the label value and color name        print(f"Label:{label}  Color:{color_Name[label]}")        time.sleep(0.2)